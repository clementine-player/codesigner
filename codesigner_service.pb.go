// Code generated by protoc-gen-go. DO NOT EDIT.
// source: codesigner_service.proto

/*
Package codesigner is a generated protocol buffer package.

It is generated from these files:
	codesigner_service.proto

It has these top-level messages:
	SignPackageRequest
	SignPackageReply
	VerifyPackageRequest
	VerifyPackageReply
*/
package codesigner

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SignPackageRequest struct {
	Package     []byte `protobuf:"bytes,1,opt,name=package,proto3" json:"package,omitempty"`
	DeveloperId string `protobuf:"bytes,2,opt,name=developer_id,json=developerId" json:"developer_id,omitempty"`
}

func (m *SignPackageRequest) Reset()                    { *m = SignPackageRequest{} }
func (m *SignPackageRequest) String() string            { return proto.CompactTextString(m) }
func (*SignPackageRequest) ProtoMessage()               {}
func (*SignPackageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SignPackageRequest) GetPackage() []byte {
	if m != nil {
		return m.Package
	}
	return nil
}

func (m *SignPackageRequest) GetDeveloperId() string {
	if m != nil {
		return m.DeveloperId
	}
	return ""
}

type SignPackageReply struct {
	SignedPackage      []byte `protobuf:"bytes,1,opt,name=signed_package,json=signedPackage,proto3" json:"signed_package,omitempty"`
	CodesignOutput     string `protobuf:"bytes,2,opt,name=codesign_output,json=codesignOutput" json:"codesign_output,omitempty"`
	CodesignReturnCode int32  `protobuf:"varint,3,opt,name=codesign_return_code,json=codesignReturnCode" json:"codesign_return_code,omitempty"`
}

func (m *SignPackageReply) Reset()                    { *m = SignPackageReply{} }
func (m *SignPackageReply) String() string            { return proto.CompactTextString(m) }
func (*SignPackageReply) ProtoMessage()               {}
func (*SignPackageReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SignPackageReply) GetSignedPackage() []byte {
	if m != nil {
		return m.SignedPackage
	}
	return nil
}

func (m *SignPackageReply) GetCodesignOutput() string {
	if m != nil {
		return m.CodesignOutput
	}
	return ""
}

func (m *SignPackageReply) GetCodesignReturnCode() int32 {
	if m != nil {
		return m.CodesignReturnCode
	}
	return 0
}

type VerifyPackageRequest struct {
	Package []byte `protobuf:"bytes,1,opt,name=package,proto3" json:"package,omitempty"`
}

func (m *VerifyPackageRequest) Reset()                    { *m = VerifyPackageRequest{} }
func (m *VerifyPackageRequest) String() string            { return proto.CompactTextString(m) }
func (*VerifyPackageRequest) ProtoMessage()               {}
func (*VerifyPackageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *VerifyPackageRequest) GetPackage() []byte {
	if m != nil {
		return m.Package
	}
	return nil
}

type VerifyPackageReply struct {
	Ok             bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	CodesignOutput string `protobuf:"bytes,2,opt,name=codesign_output,json=codesignOutput" json:"codesign_output,omitempty"`
}

func (m *VerifyPackageReply) Reset()                    { *m = VerifyPackageReply{} }
func (m *VerifyPackageReply) String() string            { return proto.CompactTextString(m) }
func (*VerifyPackageReply) ProtoMessage()               {}
func (*VerifyPackageReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *VerifyPackageReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *VerifyPackageReply) GetCodesignOutput() string {
	if m != nil {
		return m.CodesignOutput
	}
	return ""
}

func init() {
	proto.RegisterType((*SignPackageRequest)(nil), "codesigner.SignPackageRequest")
	proto.RegisterType((*SignPackageReply)(nil), "codesigner.SignPackageReply")
	proto.RegisterType((*VerifyPackageRequest)(nil), "codesigner.VerifyPackageRequest")
	proto.RegisterType((*VerifyPackageReply)(nil), "codesigner.VerifyPackageReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CodeSigner service

type CodeSignerClient interface {
	SignPackage(ctx context.Context, in *SignPackageRequest, opts ...grpc.CallOption) (*SignPackageReply, error)
	VerifyPackage(ctx context.Context, in *VerifyPackageRequest, opts ...grpc.CallOption) (*VerifyPackageReply, error)
}

type codeSignerClient struct {
	cc *grpc.ClientConn
}

func NewCodeSignerClient(cc *grpc.ClientConn) CodeSignerClient {
	return &codeSignerClient{cc}
}

func (c *codeSignerClient) SignPackage(ctx context.Context, in *SignPackageRequest, opts ...grpc.CallOption) (*SignPackageReply, error) {
	out := new(SignPackageReply)
	err := grpc.Invoke(ctx, "/codesigner.CodeSigner/SignPackage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeSignerClient) VerifyPackage(ctx context.Context, in *VerifyPackageRequest, opts ...grpc.CallOption) (*VerifyPackageReply, error) {
	out := new(VerifyPackageReply)
	err := grpc.Invoke(ctx, "/codesigner.CodeSigner/VerifyPackage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CodeSigner service

type CodeSignerServer interface {
	SignPackage(context.Context, *SignPackageRequest) (*SignPackageReply, error)
	VerifyPackage(context.Context, *VerifyPackageRequest) (*VerifyPackageReply, error)
}

func RegisterCodeSignerServer(s *grpc.Server, srv CodeSignerServer) {
	s.RegisterService(&_CodeSigner_serviceDesc, srv)
}

func _CodeSigner_SignPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeSignerServer).SignPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/codesigner.CodeSigner/SignPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeSignerServer).SignPackage(ctx, req.(*SignPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeSigner_VerifyPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeSignerServer).VerifyPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/codesigner.CodeSigner/VerifyPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeSignerServer).VerifyPackage(ctx, req.(*VerifyPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CodeSigner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "codesigner.CodeSigner",
	HandlerType: (*CodeSignerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignPackage",
			Handler:    _CodeSigner_SignPackage_Handler,
		},
		{
			MethodName: "VerifyPackage",
			Handler:    _CodeSigner_VerifyPackage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "codesigner_service.proto",
}

func init() { proto.RegisterFile("codesigner_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x75, 0x23, 0x7e, 0x4d, 0xdb, 0x28, 0x43, 0x0f, 0xa1, 0x48, 0x89, 0x01, 0x31, 0xa7, 0x50,
	0xf4, 0x27, 0x78, 0xf2, 0x50, 0xd4, 0x0d, 0x78, 0x0d, 0x35, 0x3b, 0x86, 0x90, 0x90, 0x5d, 0x37,
	0x49, 0x21, 0xff, 0xc3, 0x1f, 0xe2, 0x4f, 0x94, 0x6c, 0x9b, 0xb6, 0xf1, 0x8b, 0x1e, 0xf7, 0xbd,
	0x37, 0x33, 0xef, 0xcd, 0x2c, 0x38, 0xb1, 0x14, 0x54, 0xa6, 0x49, 0x41, 0x3a, 0x2a, 0x49, 0x2f,
	0xd3, 0x98, 0x02, 0xa5, 0x65, 0x25, 0x11, 0xb6, 0x8c, 0xf7, 0x0c, 0x18, 0xa6, 0x49, 0xf1, 0xb4,
	0x88, 0xb3, 0x45, 0x42, 0x9c, 0xde, 0x6b, 0x2a, 0x2b, 0x74, 0xe0, 0x44, 0xad, 0x10, 0x87, 0xb9,
	0xcc, 0x1f, 0xf2, 0xee, 0x89, 0x57, 0x30, 0x14, 0xb4, 0xa4, 0x5c, 0x2a, 0xd2, 0x51, 0x2a, 0x1c,
	0xcb, 0x65, 0xfe, 0x19, 0x1f, 0x6c, 0xb0, 0x07, 0xe1, 0x7d, 0x30, 0xb8, 0xe8, 0xf5, 0x54, 0x79,
	0x83, 0xd7, 0x60, 0x9b, 0x89, 0x22, 0xea, 0x37, 0x1e, 0xad, 0xd0, 0xb5, 0x16, 0x6f, 0xe0, 0xbc,
	0x33, 0x17, 0xc9, 0xba, 0x52, 0x75, 0xb5, 0x9e, 0x60, 0x77, 0xf0, 0xa3, 0x41, 0x71, 0x06, 0xe3,
	0x8d, 0x50, 0x53, 0x55, 0xeb, 0x22, 0x6a, 0xdf, 0xce, 0xa1, 0xcb, 0xfc, 0x23, 0x8e, 0x1d, 0xc7,
	0x0d, 0x75, 0x2f, 0x05, 0x79, 0x33, 0x18, 0xbf, 0x90, 0x4e, 0xdf, 0x9a, 0x7d, 0xb3, 0x7a, 0x73,
	0xc0, 0x6f, 0x15, 0x6d, 0x12, 0x1b, 0x2c, 0x99, 0x19, 0xe9, 0x29, 0xb7, 0x64, 0xb6, 0xb7, 0xe5,
	0xdb, 0x4f, 0x06, 0xd0, 0x3a, 0x09, 0xcd, 0xe6, 0x71, 0x0e, 0x83, 0x9d, 0x2d, 0xe1, 0x34, 0xd8,
	0x5e, 0x25, 0xf8, 0x79, 0x92, 0xc9, 0xe5, 0x9f, 0xbc, 0xca, 0x1b, 0xef, 0x00, 0x43, 0x18, 0xf5,
	0xcc, 0xa2, 0xbb, 0x5b, 0xf0, 0x5b, 0xf2, 0xc9, 0xf4, 0x1f, 0x85, 0x69, 0xfa, 0x7a, 0x6c, 0x3e,
	0xcc, 0xdd, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x40, 0xed, 0x79, 0x4c, 0x02, 0x00, 0x00,
}
